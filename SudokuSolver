import java.util.*;
import java.lang.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.FlowLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.util.Random;
public class SudokuSolver 
{
    public static int GridSize=9;
    public static int boxsize = (int)(Math.sqrt(GridSize));
    public static boolean[][] changeable = new boolean[GridSize][GridSize];
    public static int[][] grid = emptyGrid(9);
    public static void clrscr()// Function to clear screen
    {
        System.out.print('\u000C');
    }
    
    public static void setChanges(){ // sets the values of the changeable array, which prevents the player from changing the original numbers
        for(int i=0;i<GridSize;i++){
            for(int j=0;j<GridSize;j++){
                if(grid[i][j]==0)changeable[i][j]=true;
                else changeable[i][j]=false;
            }
        }
    }
    public static int[][] emptyGrid(int n){ // Returns a 2d array of n*n size containing all zeroes
        int[][] grid = new int[n][n];
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                grid[i][j]=0;
        return grid;
    }
    public static int NumberofUnknowns(int[][] grid){// Returns the number of unfilled cells in the grid
        int count = 0;
        for(int i=0;i<GridSize;i++)
            for(int j=0;j<GridSize;j++)
                if(grid[i][j]==0)
                    count++;
        return count;    
    }
    public static boolean checkRow(int[][] grid, int x , int y){//checks the row of the given coordinates for duplicates
        for(int i=0;i<GridSize;i++){
            if(grid[x][i]==grid[x][y] && i!=y && grid[x][i] != 0)
                return false;
        }
        return true;
    }
    public static int[][] get2dposs(int[][][]possibilities){
        int[][] poss2d = new int[NumberofUnknowns(grid)][GridSize];
        for(int i=0,k=0;i<GridSize;i++){
            for(int j=0;j<GridSize;j++){
                if(possibilities[i][j][0]!=0){
                    poss2d[k]=possibilities[i][j];
                    k++;
                }
                
            }
        }
        for(int i=0;i<poss2d.length;i++){
            for(int j=0;j<poss2d[i].length;j++){
                if(poss2d[i][j]==0){
                    poss2d[i]=Arrays.copyOf(poss2d[i],j);
                }
            }
        }
        return poss2d;
    }
    public static int[][][] possibilities(int[][] grid){
        int [][][]fits = new int[GridSize][GridSize][GridSize];
        for(int i=0;i<GridSize;i++){
            for(int j=0;j<GridSize;j++){
                if(grid[i][j]==0){
                    for(int k=0;k<GridSize;k++)
                        fits[i][j][k]=k+1;
                    int[] arrbox = get1dBox(getBox(grid,i,j));    
                    for(int k=0;k<GridSize;k++){
                        for(int l=0;l<GridSize;l++){
                            if(grid[k][j]==fits[i][j][l] || grid[i][k]==fits[i][j][l] || arrbox[k]==fits[i][j][l]){
                                fits[i][j][l]=0;
                            }
                        }
                    }
                }
            }
        }
        int [][][]fitsnew = new int[GridSize][GridSize][GridSize];
        for(int i=0;i<GridSize;i++){
            for(int j=0;j<GridSize;j++){
                for(int k=0,l=0;k<GridSize;k++){
                    if(fits[i][j][k]!=0){
                        fitsnew[i][j][l]=fits[i][j][k];
                        l++;
                    }
                }
            }
        }
        return fitsnew;
    }
    public static int NumberofSolutions(int[][] grid,int x, int y){
        int Number=0;
        for(int i=0;i<GridSize;i++){
            if(possibilities(grid)[x][y][i]!=0)Number++;
        }
        return Number;
    }
    public static boolean checkCol(int[][] grid, int x, int y){//checks the column of the given coordinates for duplicates
        for(int i=0;i<GridSize;i++){
            if(grid[i][y]==grid[x][y] && i!=x && grid[i][y] != 0)
                return false;
        }
        return true;
    }
    public static int topofBox(int x){// function to return the topmost location of the box containing the input parameter        
        if(x==0)
            return 0;
        return x-(x%(boxsize));        
    }
    public static int leftofBox(int y){// function to return the leftmost location of the box containing the input parameter
        if(y==0)
            return 0;
        return y-(y%(boxsize));
    }
    public static int charToInt(char x){
        int num=0;
        if(x>='0' && x<='9') num = x - '0';
        else if(x>='a' && x<='z') num = (x-'a')+10;
        return num;
    }
    public static void stringToGrid(String s){
        GridSize = (int)(Math.sqrt(s.length())+0.999);
        boxsize = (int)(Math.sqrt(GridSize));
        grid = new int[GridSize][GridSize];
        for(int i=0, k=0;i<GridSize;i++)
            for(int j=0;j<GridSize;j++,k++)
                grid[i][j]=charToInt(s.charAt(k));
    }
    public static int[][] getBox(int [][] grid, int x, int y){//returns the subgrid containing the input coordinates
        int[][] Box = new int[boxsize][boxsize];
        for(int i=0;i<boxsize;i++){
            for(int j=0;j<boxsize;j++){
                Box[i][j] = grid[i+topofBox(x)][j+leftofBox(y)];
            }
        }
        return Box;
    }
    public static int[] get1dBox(int [][] box){//converts the 2d array of the box into a 1d array
        int arrBox[] = new int[boxsize*boxsize];
        int k=0;
        for(int i=0;i<boxsize;i++){
            for(int j=0;j<boxsize;j++,k++)arrBox[k]=box[i][j];   
        }
        return arrBox;
    }
    public static boolean checkBox(int[][] grid, int x, int y){//checks the subgrid of the given coordinates for duplicates
        int arrBox[] = get1dBox(getBox(grid,x,y));
        for(int i=0;i<GridSize;i++){
            for(int j=i+1;j<GridSize;j++){
                if(arrBox[i]==arrBox[j] && arrBox[i]!=0)
                    return false;
            }
        }
        return true;
    }
    public static boolean checkGrid(int[][] grid){
        for(int i=0;i<GridSize;i++){
            for(int j=0;j<GridSize;j++){
                if(!checkRow(grid,i,j) ){
                    System.out.println("Error row " + i + j);
                    return false;
                }    
                if(!checkCol(grid,i,j)){
                    System.out.println("Error row " + i + j);
                    return false;
                }        
            }
        }
        for(int i=0;i<GridSize;i+=3){
            for(int j=0;j<GridSize;j+=3){
                if(!checkBox(grid,i,j))
                    return false;
            }
        }
        return true;
    }
    public static void printGrid( int grid[][]){
        System.out.print("+");
        for(int i=0;i<GridSize;i++){
            System.out.print("---+");
        }
        System.out.println();
        for(int i=0;i<GridSize;i++){
            System.out.print("|");
            for(int j=0;j<GridSize;j++){
                if(grid[i][j]==0)
                    if(j%boxsize==boxsize-1){
                        System.out.print("   ");
                        if(j%boxsize==boxsize-1 && j!=GridSize-1){
                            System.out.print("#");
                        }else{System.out.print("+");}
                    }
                    else System.out.print("   |");    
                else{
                    if(grid[i][j]<10)
                        System.out.print(" ");
                    System.out.print(grid[i][j]);
                    if(j%boxsize==boxsize-1 && j!=GridSize-1)System.out.print(" #");
                    else System.out.print(" |");   
                }
            }
            System.out.println();
            System.out.print("+");
            for(int j=0;j<grid.length;j++){
                if(i%boxsize==boxsize-1 && i!=GridSize-1){
                    System.out.print("++++");
                }else{
                    if(j%boxsize==boxsize-1 && j!=GridSize-1){System.out.print("---#");
                    }else{System.out.print("---+");}
                }
            }
            System.out.println();
        }
        
        
        System.out.println("State of Grid : "+checkGrid(grid));
        System.out.println("Number of Unknowns : "+NumberofUnknowns(grid));
    }
    public static int[][] SolveByElimination(int[][] grid){
        for(int l=0;l<NumberofUnknowns(grid);l++){
            int prev = NumberofUnknowns(grid);
            for(int i=0;i<GridSize;i++){
                for(int j=0;j<GridSize;j++){
                    if(NumberofSolutions(grid,i,j)==1){
                        for(int k=0;k<GridSize;k++){
                            if(possibilities(grid)[i][j][k]!=0){
                                grid[i][j]=possibilities(grid)[i][j][k];
                                break;
                            }
                        }
                    }
                }
            }
            if(NumberofUnknowns(grid)==0 || NumberofUnknowns(grid)==prev)break;
        }
        
        return grid;
    }
    public static int[] increment(int[] Guess,int[][] poss2d){
        int pos=0;
        
        for(int i=0;i<poss2d[0].length;i++){
            if(Guess[0]==poss2d[0][i]){
                pos=i;
                break;
            }
        }
        if(pos!=poss2d[0].length-1){
            Guess[0]=poss2d[0][pos+1];
        }else{
            int[] subarr = new int[Guess.length-1];
            Guess[0]=poss2d[0][0];
            for(int i=1;i<Guess.length-1;i++){
                Guess[i]=subarr[i-1];
            }
        }
        
        
        return Guess;
    }
    public static void BruteForceSolution(int[][] grid){
        int[] Guess = new int[NumberofUnknowns(grid)];
        int[][] gridcopy = grid;
        int[][] poss2d = get2dposs(possibilities(grid));
        for(int i=0;i<Guess.length;i++){
            Guess[i]=poss2d[i][0];
        }
        while(!checkGrid(gridcopy)){
            for(int i=0,k=0;i<GridSize;i++){
                for(int j=0;j<GridSize;j++){
                    if(grid[i][j]==0){
                        gridcopy[i][j]=Guess[k];
                        k++;
                    }
                }
            }
            clrscr();
            printGrid(gridcopy);
            if(checkGrid(grid)){
                grid=gridcopy;
                return;
            }else{
                Guess = increment(Guess,poss2d);
            }
        }
    }
    
    public static int[][] SlowBruteForceSolution(int[][] grid){
        int[] Guess = new int[NumberofUnknowns(grid)];
        for(int i=0;i<NumberofUnknowns(grid);i++){
            Guess[i]=1;
        }
        
        int pointer=0;
        while(true){
            if(Guess[pointer]==GridSize){
                Guess[pointer]=1;
            }else Guess[pointer]++;
            
            
            if(false)break;
        }
        return grid;
    }
    public static void main(String[] args){
        clrscr();
        Scanner in = new Scanner(System.in);
        int ch,ch2=0;                
        System.out.print(" Enter the order of the puzzle (4,9,16,25..) : ");
        System.out.println();
        ch=in.nextInt();
        GridSize=ch;
        boxsize = (int)(Math.sqrt(GridSize));
        System.out.println("Enter an example number. Enter zero to input your own values :");
        System.out.print("To enter all the values at once in a 1D string, enter 1");
        ch2=in.nextInt();
        if(ch2==0){
            for(int i=0;i<GridSize;i++){
                for(int j=0;j<GridSize;j++){
                    clrscr();
                    printGrid(grid);
                    grid[i][j]=in.nextInt();
                    
                }
            }
        }else{
            switch(ch){
                case 4: switch(ch2){
                            case 1: stringToGrid("0003010442311342");
                                    break;
                            case 2: stringToGrid("3040010204032010");
                                    break;
                            case 3: stringToGrid("1000000400200300");
                                    break;
                            case 4: stringToGrid("2000010200300004");
                                    break;
                            default:stringToGrid("0003010442311342");
                        }
                        break;
                case 9: switch(ch2){
                            case 1: stringToGrid("000701000730090002561000490472318000000509000000467283046000159200030074000105000");
                                    break;
                            case 2: stringToGrid("300801002201030604000204000809000106060000050702000409000509000904080705600107003");
                                    break;
                            case 3: stringToGrid("000407058007015032004603000000130860000000100000598000890056743720309081005801290");        
                                    break;
                            case 5: stringToGrid("000000000000003085001020000000507000004000100090000000500000073002010000000040009");
                                    break;
                            default:stringToGrid("000701000730090002561000490472318000000509000000467283046000159200030074000105000");
                        }
                        break;
                case 16:switch(ch2){
                            case 1: stringToGrid("b20630090f1ae080008000cbd03962f0147900608c02d3ab30f0080a076eg149a0006b080d0f490c0c90004e0g7b5ad6070b90g00000100800gdc5a098000702901200e506a004004003000c0501200ed8e7b63042000g5150c0400270bg060370a4e0f600d0080g65b1d08703009fea090fgc00a10005000e0g1a5060087b24");
                                    break;
                            case 2: stringToGrid("007605000001f00805a0006100839c0090e4a30b0c00670g8030000f0607500a0890004000c000010000370d400006000f43e8000a06050b005g0000ed100000agd10b56c07049f03905007e08000210f480c20g1009deb0b2ce100005af70g00e0d003890000072100a00b0f0008g0e50b02f0080000ad0c00800006g000000");
                                    break;
                            default:stringToGrid("b20630090f1ae080008000cbd03962f0147900608c02d3ab30f0080a076eg149a0006b080d0f490c0c90004e0g7b5ad6070b90g00000100800gdc5a098000702901200e506a004004003000c0501200ed8e7b63042000g5150c0400270bg060370a4e0f600d0080g65b1d08703009fea090fgc00a10005000e0g1a5060087b24");
                            
                        }
                        break;
                case 25:switch(ch2){
                            case 1:
                                    break;
                            default:
                        }
                        break;
            }    
        }
        setChanges();
        clrscr();
        printGrid(grid);
        System.out.println("This is the current state of the grid");
        System.out.println("Enter any number to start solving :");
        ch=in.nextInt();
        
        //grid = SolveByElimination(grid);
        BruteForceSolution(grid);
        clrscr();
        printGrid(grid);
        
        if(NumberofUnknowns(grid)>0)System.out.println("The puzzle is too hard");
        else System.out.println("Puzzle Solved Successfully");
                 
    }
}
